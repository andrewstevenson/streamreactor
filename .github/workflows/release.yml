name: Publish New Release

on:
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    outputs:
      draft_release: ${{ steps.get_tag.outputs.draft_release }}
      tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get tag, release mode
        shell: bash
        id: get_tag
        run: |
          if [[ ${GITHUB_REF##*/} =~ ^[0-9]\.[0-9]\.[0-9]$ ]];
          then
              draft_release=false
          
          elif [[ ${GITHUB_REF##*/} =~ ^[0-9]\.[0-9]\.[0-9]+(-(alpha|beta|rc)(\.[0-9]+)?)?(\+[A-Za-z0-9.]+)?$ ]];
          then
              draft_release=true
          else
              echo "Exiting, github ref needs to be a tag with format x.y.z or x.y.z+(alpha|beta|rc)"
              exit 1
          fi
          echo "::set-output name=draft_release::$draft_release"
          echo "::set-output name=tag::${GITHUB_REF##*/}"

  build:
    needs:
      - validate-tag
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.validate-tag.outputs.tag }}
    secrets: inherit

  create-release:
    runs-on: ubuntu-latest
    needs:
      - validate-tag
      - build
    strategy:
      # Avoid parallel uploads
      max-parallel: 1
      # GitHub will NOT cancel all in-progress and queued jobs in the matrix if any job in the matrix fails, which could create inconsistencies.
      # If any matrix job fails, the job will be marked as failure
      fail-fast: false
      matrix:
        module: ${{fromJSON(needs.build.outputs.modules)}}
    env:
      DRAFT_RELEASE: '${{ needs.validate-tag.outputs.draft_release }}'
      TAG: ${{ needs.validate-tag.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'

      - name: Cache SBT
        uses: actions/cache@v3
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('*.sbt') }}-${{ hashFiles('project/**') }}

      - name: Cache assembly
        uses: actions/cache@v3
        with:
          path: |
            ~/**/target/**/libs/*.jar
          key: ${{ runner.os }}-assembly-${{ matrix.module }}-${{ github.run_id }}

      - name: Package Connector
        shell: bash
        run: |
          FOLDER=kafka-connect-${{ matrix.module }}-${{ env.TAG }}
          mkdir -p $FOLDER
          cp **/target/**/libs/*.jar LICENSE $FOLDER/
          zip -r "$FOLDER.zip" $FOLDER/

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          file: kafka-connect-${{ matrix.module }}-${{ env.TAG }}.zip
          asset_name: "kafka-connect-${{ matrix.module }}-${{ env.TAG }}.zip"
          release_name: 'Stream Reactor ${{ env.TAG }}'
          prerelease: ${{ env.DRAFT_RELEASE }}