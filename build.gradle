buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0'
        classpath 'net.researchgate:gradle-release:2.6.0'
    }
}

apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'net.researchgate.release'
apply plugin: 'antlr'
apply plugin: 'maven-publish'

allprojects {
    group = 'com.datamountaineer'
    version = version
    description = "kcql"
    apply plugin: 'java'
    apply plugin: 'maven'
 //   apply plugin: 'com.github.johnrengelman.shadow'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        antlrVersion = "4.7"
        junitVersion = "4.12"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://packages.confluent.io/maven/" }
        maven { url "http://repo.typesafe.com/typesafe/releases/" }
    }

    dependencies {
        antlr "org.antlr:antlr4:$antlrVersion"
        compile "org.antlr:antlr4-runtime:$antlrVersion"
        testCompile "org.antlr:antlr4-maven-plugin:$antlrVersion"
        testCompile "junit:junit:$junitVersion"

    }

    generateGrammarSource {
        arguments += ["-package", "com.datamountaineer.kcql.antlr4"]
        outputDirectory = new File("${project.projectDir}/src/main/java/com/datamountaineer/kcql/antlr4")
    }

    test {
        maxParallelForks = 1
        minHeapSize '256m'
        maxHeapSize '2048m'
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    configurations {
        tests
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    tasks.withType(Tar) {
        compression Compression.GZIP
        extension = 'tgz'
    }


    artifacts {
        archives javadocJar, sourcesJar
    }

    compileJava.dependsOn generateGrammarSource

    task compile(dependsOn: 'compileJava')
    task fatJar(dependsOn: ['test', 'shadowJar'])
    task fatJarNoTest(dependsOn: 'shadowJar')

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    nexusStaging {
        numberOfRetries = 50
        delayBetweenRetriesInMillis = 3000
    }

    // OSSRH publication
    if (project.hasProperty('release')) {
        uploadArchives {
            repositories {
                mavenDeployer {
                    // POM signature
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    // Target repository
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    pom.project {
                        name project.name
                        artifactId "kcql"
                        description project.description
                        packaging 'jar'
                        url 'https://github.com/datamountaineer/kafka-connect-query-language'

                        scm {
                            connection 'scm:git:https://github.com/datamountaineer/kafka-connect-query-language.git'
                            developerConnection 'scm:git:git@github.com:datamountaineer/kafka-connect-query-language.git'
                            url 'https://github.com/datamountaineer/kafka-connect-query-language.git'
                        }

                        licenses {
                            license {
                                name 'Apache License 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.html'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'andrewstevenson'
                                name = 'Andrew Stevenson'
                                email = 'andrew@datamountaineer.com'
                            }
                            developer {
                                id = 'stheppi'
                                name = 'Stefan Bocutiu'
                                email = 'stefan@datamountaineer.com'
                            }
                            developer {
                                id = 'Antwnis'
                                name = 'Antonios Chalkiopoulos'
                                email = 'antonios@landoop.com'
                            }
                        }
                    }
                }
            }
        }

        nexusStaging {
            packageGroup = project.getGroup()
            username = ossrhUsername
            password = ossrhPassword
        }
    }
}

